{"version":3,"sources":["logo.svg","components/SearchField.js","components/Card.js","components/CardList.js","containers/App.js","actions.js","CONSTANTS.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","SearchField","searchChange","className","type","placeholder","onChange","Card","id","robot","src","name","alt","email","CardList","robots","map","i","key","App","this","props","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","logo","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c941d02.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React from 'react';\r\nimport './SearchField.css';\r\n\r\nconst SearchField = ({searchChange}) => {\r\n\treturn (\r\n\t\t<div className=\"SearchField\">\r\n\t\t\t<input \r\n\t\t\t\ttype=\"search\" \r\n\t\t\t\tplaceholder=\"Type a robot's name...\" \r\n\t\t\t\tonChange={searchChange} \r\n\t\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchField;","import React from 'react';\r\nimport './Card.css';\r\n\r\nfunction Card({ id, robot }) {\r\n  return (\r\n      <div id={id} className=\"Robot\">\r\n      \t<img src={`https://robohash.org/${robot.name}`} alt=\"a robot should be here\" />\r\n      \t<p>\r\n          {robot.name}\r\n        </p>\r\n        <p>\r\n          {robot.email}\r\n      \t</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport './CardList.css';\r\nimport Card from './Card';\r\nimport './CardList.css';\r\n\r\nfunction CardList({robots}) {\r\n\treturn (\r\n\t\t<div className='cardList'>\r\n\t\t{\r\n\t\t\trobots.map( (robot, i) => {\r\n\t\t\t\treturn <Card key={i} id={robot.id} robot={robot} />\r\n\t\t\t})\r\n\t\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport logo from '../logo.svg';\r\nimport './App.css';\r\nimport SearchField from '../components/SearchField';\r\nimport CardList from '../components/CardList';\r\n\r\nimport { setSearchField, requestRobots } from '../actions';\r\n\r\nconst mapStateToProps = state => {\r\n\treturn {\r\n\t\t/* searchRobots */\r\n\t\tsearchField: state.searchRobots.searchField,\r\n\t\t/* requestRobots */\r\n\t\tisPending: state.requestRobots.isPending,\r\n\t\trobots: state.requestRobots.robots,\r\n\t\terror: state.requestRobots.error,\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n\treturn {\r\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n\t\tonRequestRobots: () => requestRobots(dispatch)\r\n\t}\r\n}\r\n\r\nclass App extends Component {\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.props.onRequestRobots();\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\r\n\t\tconst filteredRobots = robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n\t\t})\r\n\t\treturn isPending ?\r\n\t\t\t<h1>Loading...</h1>\r\n\t\t:\r\n\t\t\t<div className=\"App\">\r\n\t\t\t<header className=\"App-header\">\r\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n\t\t\t\t<SearchField searchChange={onSearchChange}/>\r\n\t\t\t\t<CardList robots={filteredRobots} />\r\n\t\t\t</header>\r\n\t\t\t</div>\r\n\t\t;\r\n\t}\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILURE, REQUEST_ROBOTS_PENDING } from './CONSTANTS.js'\r\n\r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = (dispatch) => {\r\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => response.json())\r\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\r\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: error }));\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\n/* REQUEST ROBOTS */\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILURE = 'REQUEST_ROBOTS_FAILURE';\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILURE } from './CONSTANTS.js';\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state=initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, { isPending: true });\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false });\r\n\t\tcase REQUEST_ROBOTS_FAILURE:\r\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false });\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\r\nimport { createLogger } from 'redux-logger';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { searchRobots, requestRobots } from './reducers';\r\n\r\nconst logger = createLogger();\r\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\r\nconst store = \r\n\tcreateStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\r\n\r\nReactDOM.render(\r\n\t\t\t\t<Provider store={store}>\r\n\t\t\t\t\t<App />\r\n\t\t\t\t</Provider>\r\n\t\t\t\t, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}