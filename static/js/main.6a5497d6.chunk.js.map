{"version":3,"sources":["logo.svg","components/SearchField.js","components/Card.js","components/CardList.js","containers/App.js","actions.js","CONSTANTS.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","SearchField","searchChange","className","type","placeholder","onChange","Card","id","robot","src","name","alt","email","CardList","robots","map","i","key","App","this","props","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","toLowerCase","includes","logo","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.6a5497d6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport './SearchField.css';\n\nconst SearchField = ({searchChange}) => {\n\treturn (\n\t\t<div className=\"SearchField\">\n\t\t\t<input \n\t\t\t\ttype=\"search\" \n\t\t\t\tplaceholder=\"Type a robot's name...\" \n\t\t\t\tonChange={searchChange} \n\t\t\t\t/>\n\t\t</div>\n\t);\n}\n\nexport default SearchField;","import React from 'react';\nimport './Card.css';\n\nfunction Card({ id, robot }) {\n  return (\n      <div id={id} className=\"Robot\">\n      \t<img src={`https://robohash.org/${robot.name}`} alt=\"a robot should be here\" />\n      \t<p>\n          {robot.name}\n        </p>\n        <p>\n          {robot.email}\n      \t</p>\n    </div>\n  );\n}\n\nexport default Card;\n","import React from 'react';\nimport './CardList.css';\nimport Card from './Card';\nimport './CardList.css';\n\nfunction CardList({robots}) {\n\treturn (\n\t\t<div className='cardList'>\n\t\t{\n\t\t\trobots.map( (robot, i) => {\n\t\t\t\treturn <Card key={i} id={robot.id} robot={robot} />\n\t\t\t})\n\t\t}\n\t\t</div>\n\t);\n}\n\nexport default CardList;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport logo from '../logo.svg';\nimport './App.css';\nimport SearchField from '../components/SearchField';\nimport CardList from '../components/CardList';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n\treturn {\n\t\t/* searchRobots */\n\t\tsearchField: state.searchRobots.searchField,\n\t\t/* requestRobots */\n\t\tisPending: state.requestRobots.isPending,\n\t\trobots: state.requestRobots.robots,\n\t\terror: state.requestRobots.error,\n\t}\n}\n\nconst mapDispatchToProps = (dispatch) => {\n\treturn {\n\t\tonSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n\t\tonRequestRobots: () => requestRobots(dispatch)\n\t}\n}\n\nclass App extends Component {\n\n\tcomponentDidMount() {\n\t\tthis.props.onRequestRobots();\n\t}\n\n\trender() {\n\t\tconst { searchField, onSearchChange, robots, isPending } = this.props;\n\t\tconst filteredRobots = robots.filter(robot => {\n\t\t\treturn robot.name.toLowerCase().includes(searchField.toLowerCase());\n\t\t})\n\t\treturn isPending ?\n\t\t\t<h1>Loading...</h1>\n\t\t:\n\t\t\t<div className=\"App\">\n\t\t\t<header className=\"App-header\">\n\t\t\t\t<img src={logo} className=\"App-logo\" alt=\"logo\" />\n\t\t\t\t<SearchField searchChange={onSearchChange}/>\n\t\t\t\t<CardList robots={filteredRobots} />\n\t\t\t</header>\n\t\t\t</div>\n\t\t;\n\t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILURE, REQUEST_ROBOTS_PENDING } from './CONSTANTS.js'\n\nexport const setSearchField = (text) => ({\n\ttype: CHANGE_SEARCH_FIELD,\n\tpayload: text\n})\n\nexport const requestRobots = (dispatch) => {\n\tdispatch({ type: REQUEST_ROBOTS_PENDING });\n\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t.then(response => response.json())\n\t\t.then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n\t\t.catch(error => dispatch({ type: REQUEST_ROBOTS_FAILURE, payload: error }));\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\n/* REQUEST ROBOTS */\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILURE = 'REQUEST_ROBOTS_FAILURE';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD, REQUEST_ROBOTS_PENDING, REQUEST_ROBOTS_SUCCESS, REQUEST_ROBOTS_FAILURE } from './CONSTANTS.js';\n\nconst initialStateSearch = {\n\tsearchField: ''\n}\n\nexport const searchRobots = (state=initialStateSearch, action={}) => {\n\tswitch(action.type) {\n\t\tcase CHANGE_SEARCH_FIELD:\n\t\t\treturn Object.assign({}, state, { searchField: action.payload });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n\nconst initialStateRobots = {\n\tisPending: false,\n\trobots: [],\n\terror: ''\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n\tswitch(action.type) {\n\t\tcase REQUEST_ROBOTS_PENDING:\n\t\t\treturn Object.assign({}, state, { isPending: true });\n\t\tcase REQUEST_ROBOTS_SUCCESS:\n\t\t\treturn Object.assign({}, state, { robots: action.payload, isPending: false });\n\t\tcase REQUEST_ROBOTS_FAILURE:\n\t\t\treturn Object.assign({}, state, { error: action.payload, isPending: false });\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({ searchRobots, requestRobots });\nconst store = \n\tcreateStore(rootReducer, applyMiddleware(logger, thunkMiddleware));\n\nReactDOM.render(\n\t\t\t\t<Provider store={store}>\n\t\t\t\t\t<App />\n\t\t\t\t</Provider>\n\t\t\t\t, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();"],"sourceRoot":""}